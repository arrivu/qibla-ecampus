Index: app/controllers/conferences_controller.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/controllers/conferences_controller.rb	(revision da0d95520d4b752a83859578ec9a8e08859f1cdb)
+++ app/controllers/conferences_controller.rb	(revision 59b394c2aac786b9d167719a369eb38ee7514358)
@@ -90,12 +90,12 @@
 class ConferencesController < ApplicationController
   include Api::V1::Conferences
 
-  before_filter :require_context
-  add_crumb(proc{ t '#crumbs.conferences', "Conferences"}) { |c| c.send(:named_context_url, c.instance_variable_get("@context"), :context_conferences_url) }
+  before_filter :require_context, :except => [:get_conferences_for_user]
+  add_crumb(proc{ t '#crumbs.conferences', "Conferences"},:except => [:get_conferences_for_user]) { |c| c.send(:named_context_url, c.instance_variable_get("@context"), :context_conferences_url) }
   before_filter { |c| c.active_tab = "conferences" }
   before_filter :require_config
   before_filter :reject_student_view_student
-  before_filter :get_conference, :except => [:index, :create]
+  before_filter :get_conference, :except => [:get_conferences_for_user, :index, :create,:get_users_from_section,:api_create, :api_destroy]
 
   # @API List conferences
   # Retrieve the list of conferences for this context
@@ -116,8 +116,8 @@
     return unless tab_enabled?(@context.class::TAB_CONFERENCES)
     return unless @current_user
     conferences = @context.grants_right?(@current_user, :manage_content) ?
-      @context.web_conferences :
-      @current_user.web_conferences.where(context_type: @context.class.to_s, context_id: @context.id)
+        @context.web_conferences :
+        @current_user.web_conferences.where(context_type: @context.class.to_s, context_id: @context.id)
     api_request? ? api_index(conferences) : web_index(conferences)
   end
 
@@ -132,6 +132,8 @@
     @new_conferences, @concluded_conferences = conferences.partition { |conference|
       conference.ended_at.nil?
     }
+    @new_conferences = @new_conferences.sort_by(&:start_date)
+    #@concluded_conferences = @concluded_conferences.sort_by(&:start_date)
     log_asset_access("conferences:#{@context.asset_string}", "conferences", "other")
     scope = @context.users
     if @context.respond_to?(:participating_typical_users)
@@ -140,11 +142,13 @@
     @users = scope.where("users.id<>?", @current_user).order(User.sortable_name_order_by_clause).all.uniq
     # exposing the initial data as json embedded on page.
     js_env(
-      current_conferences: ui_conferences_json(@new_conferences, @context, @current_user, session),
-      concluded_conferences: ui_conferences_json(@concluded_conferences, @context, @current_user, session),
-      default_conference: default_conference_json(@context, @current_user, session),
-      conference_type_details: conference_types_json(WebConference.conference_types),
-      users: @users.map { |u| {:id => u.id, :name => u.last_name_first} },
+        current_conferences: ui_conferences_json(@new_conferences, @context, @current_user, session),
+        concluded_conferences: ui_conferences_json(@concluded_conferences, @context, @current_user, session),
+        default_conference: default_conference_json(@context, @current_user, session),
+        conference_type_details: conference_types_json(WebConference.conference_types),
+        users: @users.map { |u| {:id => u.id, :name => u.last_name_first} },
+        course_sections: @context.course_sections.active,
+        current_date_time: Time.now
     )
   end
   protected :web_index
@@ -174,9 +178,22 @@
         if @conference.save
           @conference.add_initiator(@current_user)
           members.uniq.each do |u|
+            if u.id != @current_user.id
-            @conference.add_invitee(u)
-          end
+              @conference.add_invitee(u)
+            end
+          end
           @conference.save
+
+          members.uniq.each do |u|
+            @event = CalendarEvent.new(:title => params[:title], :description => params[:description],
+                                       :start_at => params[:start_date], :end_at => params[:start_date])
+            @event.context_id = u.id
+            @event.context_type = @current_user.class.name
+            @event.updating_user = @current_user
+            @event.save
+            conference_calendar_event_association = @event.conference_calendar_event_associations.build(:web_conference_id => @conference.id)
+            conference_calendar_event_association.save!
+          end
           format.html { redirect_to named_context_url(@context, :context_conference_url, @conference.id) }
           format.json { render :json => WebConference.find(@conference).as_json(:permissions => {:user => @current_user, :session => session},
                                                                                 :url => named_context_url(@context, :context_conference_url, @conference)) }
@@ -188,6 +205,46 @@
     end
   end
 
+  def api_create
+    if authorized_action(@context.web_conferences.new, @current_user, :create)
+      params[:web_conference].try(:delete, :long_running)
+      @conference = @context.web_conferences.build(conference_type: params[:type],title: params[:title],
+                                                   description: params[:description],start_date: params[:start_date],
+                                                   duration: params[:duration])
+      @conference.settings[:default_return_url] = named_context_url(@context, :context_url, :include_host => true)
+      @conference.settings[:record ]= params[:record]
+      @conference.user = User.find(params[:teacher_id])
+      members = get_new_members_for_api
+      respond_to do |format|
+        @conference.add_initiator(User.find(params[:teacher_id]))
+        @conference.add_invitee(User.find(params[:student_id]))
+        if @conference.save
+          @event = CalendarEvent.new(:title=>params[:title], :description=>params[:description], :start_at=> params[:start_date], :end_at=> params[:start_date])
+          @event.context_id = params[:teacher_id]
+          @event.context_type = "User"
+          @event.updating_user = @current_user
+          @event.save
+          conference_calendar_event_association = @event.conference_calendar_event_associations.build(:web_conference_id => @conference.id)
+          conference_calendar_event_association.save!
+
+          @event = CalendarEvent.new(:title=>params[:title], :description=>params[:description], :start_at=> params[:start_date], :end_at=> params[:start_date])
+          @event.context_id = params[:student_id]
+          @event.context_type = "User"
+          @event.updating_user = @current_user
+          @event.save
+          conference_calendar_event_association = @event.conference_calendar_event_associations.build(:web_conference_id => @conference.id)
+          conference_calendar_event_association.save!
+
+          format.json { render :json => WebConference.find(@conference).as_json(:permissions => {:user => @current_user, :session => session},
+                                                                                :url => named_context_url(@context, :context_conference_url, @conference)) }
+        else
+          format.json { render :json => @conference.errors, :status => :bad_request }
+        end
+      end
+    end
+  end
+
+
   def update
     if authorized_action(@conference, @current_user, :update)
       @conference.user ||= @current_user
@@ -198,8 +255,10 @@
         if @conference.update_attributes(params[:web_conference])
           # TODO: ability to dis-invite people
           members.uniq.each do |u|
+            if u.id != @current_user.id
-            @conference.add_invitee(u)
-          end
+              @conference.add_invitee(u)
+            end
+          end
           @conference.save
           format.html { redirect_to named_context_url(@context, :context_conference_url, @conference.id) }
           format.json { render :json => @conference.as_json(:permissions => {:user => @current_user, :session => session},
@@ -264,6 +323,11 @@
 
   def destroy
     if authorized_action(@conference, @current_user, :delete)
+      @events = @conference.conference_calendar_event_associations
+      @events.each do |e|
+        x=CalendarEvent.find(e.calendar_event_id)
+        x.destroy
+      end
       @conference.destroy
       respond_to do |format|
         format.html { redirect_to named_context_url(@context, :context_conferences_url) }
@@ -272,6 +336,112 @@
     end
   end
 
+  def api_destroy
+    @conference = WebConference.find(params[:id])
+    if authorized_action(@conference, @current_user, :delete)
+      @events = @conference.conference_calendar_event_associations
+      @events.each do |e|
+        x=CalendarEvent.find(e.calendar_event_id)
+        x.destroy
+      end
+      @conference.destroy
+      respond_to do |format|
+        format.json { render :json => @conference }
+      end
+    end
+  end
+
+  def get_users_from_section
+    if params[:course_section_id] != "0"
+      @students = CourseSection.find(params[:course_section_id]).students.active
+    else
+      @students = @context.students.active
+    end
+    respond_to do |format|
+      format.json { render :json => @students.map{|s| {:id => s.id, :name => s.last_name_first}} }
+    end
+  end
+
+  def get_new_members_for_api
+    members = [@current_user]
+    if params[:user] && params[:user] != "all"
+      ids = []
+      params[:user].each do |id|
+        ids << id.to_i
+      end
+      if params[:section_id].present?
+        section = @context.course_sections.find_by_sis_source_id(params[:section_id])
+        if !section.nil? and !section.empty?
+          members += section.users.find_all_by_find_all_by_sis_sourse_id(ids).to_a
+        end
+      else
+        members += @context.course_sections.default.first.users.find_all_by_sis_sourse_id(ids).to_a
+      end
+    else
+      if params[:section_id].present?
+        section = @context.course_sections.find_by_sis_source_id(params[:section_id])
+        if !section.nil? and !section.empty?
+          members += section.users.to_a
+        end
+      else
+        members += @context.course_sections.default.first.users.to_a
+      end
+    end
+    members - @conference.invitees
+  end
+
+  def get_conferences_for_user
+    conferences = []
+    @current_conferences_json = []
+    @concluded_conferences_json = []
+    scope = []
+
+    @web_conference_participants = @current_user.web_conference_participants.uniq
+    @web_conference_participants.each do |web_conference_participant|
+      web_conference = web_conference_participant.web_conference
+      if web_conference
+        conferences <<  web_conference
+      end
+    end
+    @current_user.web_conferences.uniq.each do |web|
+      conferences << web
+    end
+
+    @new_conferences, @concluded_conferences = conferences.partition { |conference|
+      conference.ended_at.nil?
+    }
+    @new_conferences = @new_conferences.sort_by(&:start_date)
+
+    @new_conferences.uniq.each do |new_conference|
+      @current_conferences_json <<  single_conferences_json(new_conference, new_conference.context, @current_user, session)
+    end
+
+    @concluded_conferences.uniq.each do |concluded_conference|
+      @concluded_conferences_json << single_conferences_json(concluded_conference, concluded_conference.context,
+                                                             @current_user, session)
+    end
+
+
+    conferences.each do |conference|
+      conference.context.participating_typical_users.each do |user|
+        scope << user
+      end
+    end
+
+    #@users = scope.uniq
+    #@users.delete_if{|u| u == @current_user}
+
+    js_env(
+        current_conferences: @current_conferences_json ,
+        concluded_conferences: @concluded_conferences_json ,
+        #default_conference: default_conference_json(@context, @current_user, session),
+        conference_type_details: conference_types_json(WebConference.conference_types),
+        is_for_user: true,
+        current_date_time: Time.now
+    #users: @users.map { |u| {:id => u.id, :name => u.last_name_first} }
+    #course_sections: @context.course_sections.active
+    )
+  end
   protected
 
   def require_config
